{"version":3,"sources":["services/setting.service.ts"],"names":[],"mappings":"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","file":"setting.service.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { Setting } from \"../entities\";\n\n@Injectable()\nexport class SettingService {\n    private isInitialized = false;\n\n    private settings: Array<Setting> = [];\n\n    /**\n     * @param { Repository<Setting> } repository\n     */\n    constructor(\n        @InjectRepository(Setting)\n        private readonly repository: Repository<Setting>,\n    ) {\n    }\n\n    public async get<T>(key: string, defaultValue: T): Promise<T> {\n        const setting: Setting | undefined = await this.getSettingByKey(key);\n        if (!setting) {\n            return defaultValue;\n        }\n        let result;\n        switch (typeof defaultValue) {\n            case \"boolean\":\n                result = setting.value === \"1\";\n                break;\n            case \"string\":\n                result = setting.value;\n                break;\n            case \"number\":\n                result = Number(setting.value);\n                break;\n            default:\n                result = setting.value;\n                break;\n        }\n\n        return result as T;\n    }\n\n    /**\n     * @returns { Promise<Array<Setting>> }\n     */\n    public async getSettings(): Promise<Array<Setting>> {\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n\n        return this.settings;\n    }\n\n    /**\n     * @param { String } key\n     *\n     * @returns { Promise<Setting | undefined> }\n     */\n    public async getSettingByKey(key: string): Promise<Setting | undefined> {\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n\n        return this.settings.find((setting: Setting) => {\n            return setting.key === key;\n        });\n    }\n\n    /**\n     * @param { String } key\n     *\n     * @returns { Promise<Setting | undefined> }\n     */\n    public async removeSetting(key: string): Promise<Setting | undefined> {\n        const setting: Setting | undefined = await this.getSettingByKey(key);\n        if (typeof setting === \"undefined\") {\n            throw new Error(`Setting dot not exists with key ${key}`);\n        } else {\n            await this.repository.delete({\n                key: setting.key,\n            });\n            await this.initialize();\n        }\n\n        return setting;\n    }\n\n    /**\n     * @param { String } key\n     * @param { String } value\n     *\n     * @returns { Promise<Setting> }\n     */\n    public async setSetting(key: string, value: string): Promise<Setting> {\n        let setting: Setting | undefined = await this.getSettingByKey(key);\n        if (typeof setting === \"undefined\") {\n            setting = await this.repository.create({\n                key,\n                value,\n            });\n        } else {\n            setting.value = value;\n        }\n        await this.repository.save(setting);\n        await this.initialize();\n\n        return setting;\n    }\n\n    private async initialize(): Promise<void> {\n        this.settings = await this.repository.find();\n        this.isInitialized = true;\n    }\n}\n"]}