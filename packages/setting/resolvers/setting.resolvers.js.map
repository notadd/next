{"version":3,"sources":["resolvers/setting.resolvers.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6CAA4D;AAE5D,0CAA6C;AAC7C,2CAA2C;AAC3C,2DAAmD;AAInD,IAAa,gBAAgB,GAA7B;IACI,YAA6B,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;IACpD,CAAC;IAID,KAAK,CAAC,WAAW;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC;IAID,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,IAAqB;QAC/C,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClD,CAAC;IAID,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,IAAqB;QAC1C,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE3C,OAAO;YACH,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,8BAA8B;SAC1C,CAAC;IACN,CAAC;IAID,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,IAAoC;QACtD,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAEpD,OAAO;YACH,IAAI,EAAE,GAAG;YACT,OAAO,EAAE,2BAA2B;SACvC,CAAC;IACN,CAAC;CACJ,CAAA;AA/BG;IAFC,eAAK,EAAE;IACP,kBAAS,CAAC,0BAAS,CAAC;;;;mDAGpB;AAID;IAFC,eAAK,EAAE;IACP,kBAAS,CAAC,0BAAS,CAAC;;;;uDAGpB;AAID;IAFC,kBAAQ,EAAE;IACV,kBAAS,CAAC,0BAAS,CAAC;;;;qDAQpB;AAID;IAFC,kBAAQ,EAAE;IACV,kBAAS,CAAC,0BAAS,CAAC;;;;kDAQpB;AApCQ,gBAAgB;IAD5B,kBAAQ,CAAC,SAAS,CAAC;qCAEsB,yBAAc;GAD3C,gBAAgB,CAqC5B;AArCY,4CAAgB","file":"setting.resolvers.js","sourcesContent":["import { Mutation, Query, Resolver } from \"@nestjs/graphql\";\nimport { Setting } from \"../entities\";\nimport { SettingService } from \"../services\";\nimport { UseGuards } from \"@nestjs/common\";\nimport { UserGuard } from \"@notadd/authentication\";\nimport { Result } from \"@notadd/core/interfaces\";\n\n@Resolver(\"Setting\")\nexport class SettingResolvers {\n    constructor(private readonly service: SettingService) {\n    }\n\n    @Query()\n    @UseGuards(UserGuard)\n    async getSettings(): Promise<Array<Setting>> {\n        return this.service.getSettings();\n    }\n\n    @Query()\n    @UseGuards(UserGuard)\n    async getSettingByKey(object, args: { key: string }): Promise<Setting | undefined> {\n        return this.service.getSettingByKey(args.key);\n    }\n\n    @Mutation()\n    @UseGuards(UserGuard)\n    async removeSetting(obj, args: { key: string }): Promise<Result | undefined> {\n        await this.service.removeSetting(args.key);\n\n        return {\n            code: 200,\n            message: \"Remove setting successfully!\",\n        };\n    }\n\n    @Mutation()\n    @UseGuards(UserGuard)\n    async setSetting(obj, args: { key: string, value: string }): Promise<Result> {\n        await this.service.setSetting(args.key, args.value);\n\n        return {\n            code: 200,\n            message: \"Set setting successfully!\",\n        };\n    }\n}\n"]}