{"version":3,"sources":["servers/graphiql.server.ts"],"names":[],"mappings":";;AAAA,0DAA0D;AAC1D,2BAA2B;AAI3B,wBAA+B,OAA8B;IACzD,OAAO,CAAC,OAAuC,EAAE,QAA8B,EAAE,IAAS,EAAE,EAAE;QAC1F,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC;QAChE,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,IAAI,CACxD,cAAc,CAAC,EAAE;YACb,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YAChD,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC/B,QAAQ,CAAC,GAAG,EAAE,CAAC;QACnB,CAAC,EACD,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CACvB,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AAZD,wCAYC","file":"graphiql.server.js","sourcesContent":["import * as GraphiQL from \"apollo-server-module-graphiql\";\nimport * as url from \"url\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { RequestHandler } from \"@nestjs/common/interfaces/http/http-server.interface\";\n\nexport function graphiqlServer(options: GraphiQL.GraphiQLData): RequestHandler {\n    return (request: Partial<IncomingMessage> | any, response: ServerResponse | any, next: any) => {\n        const query = request.url && url.parse(request.url, true).query;\n        GraphiQL.resolveGraphiQLString(query, options, request).then(\n            graphiqlString => {\n                response.setHeader(\"Content-Type\", \"text/html\");\n                response.write(graphiqlString);\n                response.end();\n            },\n            error => next(error),\n        );\n    };\n}\n"]}