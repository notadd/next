{"version":3,"sources":["servers/graphql.server.ts"],"names":[],"mappings":";;AAAA,2DAI4B;AAI5B,uBAA8B,OAAuB;IACjD,OAAO,CAAC,GAAmC,EAAE,GAAyB,EAAE,IAAS,EAAE,EAAE;QACjF,iCAAY,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACrB,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,OAAO;YACP,KAAK,EAAE,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK;SACtD,CAAC,CAAC,IAAI,CACH,WAAW,CAAC,EAAE;YACV,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YAClD,GAAG,CAAC,SAAS,CACT,gBAAgB,EAChB,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,CACpD,CAAC;YACF,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACvB,GAAG,CAAC,GAAG,EAAE,CAAC;QACd,CAAC,EACD,CAAC,KAAqB,EAAE,EAAE;YACtB,IAAI,gBAAgB,KAAK,KAAK,CAAC,IAAI,EAAE;gBACjC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;aACtB;YAED,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACxC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC;aACN;YAED,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YAClC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACzB,GAAG,CAAC,GAAG,EAAE,CAAC;QACd,CAAC,CACJ,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AAjCD,sCAiCC","file":"graphql.server.js","sourcesContent":["import {\n    GraphQLOptions,\n    HttpQueryError,\n    runHttpQuery,\n} from \"apollo-server-core\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { RequestHandler } from \"@nestjs/common/interfaces/http/http-server.interface\";\n\nexport function graphqlServer(options: GraphQLOptions): RequestHandler {\n    return (req: Partial<IncomingMessage> | any, res: ServerResponse | any, next: any) => {\n        runHttpQuery([req, res], {\n            method: req.method,\n            options,\n            query: req.method === \"POST\" ? req.body : req.query,\n        }).then(\n            gqlResponse => {\n                res.setHeader(\"Content-Type\", \"application/json\");\n                res.setHeader(\n                    \"Content-Length\",\n                    Buffer.byteLength(gqlResponse, \"utf8\").toString(),\n                );\n                res.write(gqlResponse);\n                res.end();\n            },\n            (error: HttpQueryError) => {\n                if (\"HttpQueryError\" !== error.name) {\n                    return next(error);\n                }\n\n                if (error.headers) {\n                    Object.keys(error.headers).forEach(header => {\n                        res.setHeader(header, error.headers[header]);\n                    });\n                }\n\n                res.statusCode = error.statusCode;\n                res.write(error.message);\n                res.end();\n            },\n        );\n    };\n}\n"]}