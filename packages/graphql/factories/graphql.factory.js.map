{"version":3,"sources":["factories/graphql.factory.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yBAAyB;AACzB,6BAA6B;AAC7B,2CAA4C;AAE5C,iDAAqD;AACrD,iEAAmD;AACnD,2FAAsF;AAGtF,IAAa,cAAc,GAA3B;IACI,YACqB,wBAAkD;QAAlD,6BAAwB,GAAxB,wBAAwB,CAA0B;IAEvE,CAAC;IAEM,YAAY,CAAC,gBAA6C;QAC7D,OAAO,oCAAoB,mBACpB,gBAAgB,IACnB,SAAS,oBACF,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,EACvC,CACC,gBAAgB,CAAC,SAAS,IAAI,EAAE,CACnC,KAEP,CAAC;IACP,CAAC;IAEM,eAAe;QAClB,OAAO,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,CAAC;IAC5D,CAAC;IAEM,iBAAiB,CAAC,YAA2B;QAChD,MAAM,KAAK,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnE,OAAO,kCAAU,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACxD,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAEO,SAAS,CAAC,OAAe;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEjC,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IAC5D,CAAC;CACJ,CAAA;AAnCY,cAAc;IAD1B,mBAAU,EAAE;qCAGsC,qDAAwB;GAF9D,cAAc,CAmC1B;AAnCY,wCAAc","file":"graphql.factory.js","sourcesContent":["import * as fs from \"fs\";\nimport * as glob from \"glob\";\nimport { Injectable } from \"@nestjs/common\";\nimport { IExecutableSchemaDefinition, MergeInfo } from \"graphql-tools/dist/Interfaces\";\nimport { makeExecutableSchema } from \"graphql-tools\";\nimport { mergeTypes } from \"merge-graphql-schemas\";\nimport { ResolversExplorerService } from \"@nestjs/graphql/resolvers-explorer.service\";\n\n@Injectable()\nexport class GraphqlFactory {\n    constructor(\n        private readonly resolversExplorerService: ResolversExplorerService,\n    ) {\n    }\n\n    public createSchema(schemaDefinition: IExecutableSchemaDefinition) {\n        return makeExecutableSchema({\n            ...schemaDefinition,\n            resolvers: {\n                ...this.resolversExplorerService.explore(),\n                ...(\n                    schemaDefinition.resolvers || {}\n                ),\n            },\n        });\n    }\n\n    public createDelegates(): (mergeInfo: MergeInfo) => any {\n        return this.resolversExplorerService.exploreDelegates();\n    }\n\n    public mergeTypesByPaths(pathsToTypes: Array<string>): string {\n        const types = pathsToTypes.map(pattern => this.loadFiles(pattern));\n\n        return mergeTypes(types.map(item => {\n            return Array.isArray(item) ? item.join(\"\\n\") : item;\n        }));\n    }\n\n    private loadFiles(pattern: string): Array<any> {\n        const paths = glob.sync(pattern);\n\n        return paths.map(path => fs.readFileSync(path, \"utf8\"));\n    }\n}\n"]}