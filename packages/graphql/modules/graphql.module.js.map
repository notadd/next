{"version":3,"sources":["modules/graphql.module.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,iDAAiD;AACjD,kDAAqD;AACrD,6CAAgD;AAChD,2CAA4D;AAE5D,4CAA8C;AAC9C,wCAA2D;AAU3D,IAAa,aAAa,GAA1B;IAMI,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QALnD,kBAAa,GAAyB,uBAAa,CAAC,wBAAwB,EAAE,CAAC;IAMvF,CAAC;IAKD,SAAS,CAAC,QAA4B;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACnC,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;YAC/B,QAAQ;iBACH,KAAK,CAAC,wBAAc,CAAC,EAAE,WAAW,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;iBACzE,SAAS,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;SACzD;QACD,QAAQ;aACH,KAAK,CAAC,uBAAa,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;aAChC,SAAS,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,YAAY;QACR,MAAM,KAAK,GAAkB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,EAC5D,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAEhE,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;YACpC,QAAQ;YACR,SAAS,EAAE;gBACP,IAAI,EAAE,WAAW;aACpB;SACJ,CAAC,CAAC;IACP,CAAC;CACJ,CAAA;AApCY,aAAa;IARzB,eAAM,CAAC;QACJ,OAAO,EAAE;YACL,uBAAa;SAChB;QACD,SAAS,EAAE;YACP,0BAAc;SACjB;KACJ,CAAC;qCAO+C,0BAAc;GANlD,aAAa,CAoCzB;AApCY,sCAAa","file":"graphql.module.js","sourcesContent":["import * as GraphQLJSON from \"graphql-type-json\";\nimport { Configuration } from \"@notadd/core/loaders\";\nimport { GraphQLModule } from \"@nestjs/graphql\";\nimport { MiddlewareConsumer, Module } from \"@nestjs/common\";\nimport { GraphqlConfiguration } from \"@notadd/core/configurations/graphql.configuration\";\nimport { GraphqlFactory } from \"../factories\";\nimport { graphiqlServer, graphqlServer } from \"../servers\";\n\n@Module({\n    imports: [\n        GraphQLModule,\n    ],\n    providers: [\n        GraphqlFactory,\n    ],\n})\nexport class GraphqlModule {\n    private configuration: GraphqlConfiguration = Configuration.loadGraphqlConfiguration();\n\n    /**\n     * @param { GraphqlFactory } graphqlFactory\n     */\n    constructor(private readonly graphqlFactory: GraphqlFactory) {\n    }\n\n    /**\n     * @param { MiddlewareConsumer } consumer\n     */\n    configure(consumer: MiddlewareConsumer) {\n        const schema = this.createSchema();\n        if (this.configuration.ide.enable) {\n            consumer\n                .apply(graphiqlServer({ endpointURL: `/${this.configuration.endpoint}` }))\n                .forRoutes(`/${this.configuration.ide.endpoint}`);\n        }\n        consumer\n            .apply(graphqlServer({ schema }))\n            .forRoutes(`/${this.configuration.endpoint}`);\n    }\n\n    createSchema() {\n        const paths: Array<string> = this.configuration.paths.concat([\n        ]);\n        const typeDefs = this.graphqlFactory.mergeTypesFromPaths(paths);\n\n        return this.graphqlFactory.createSchema({\n            typeDefs,\n            resolvers: {\n                Json: GraphQLJSON,\n            },\n        });\n    }\n}\n"]}