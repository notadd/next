{"version":3,"sources":["utilities/import-injections-from-directories.ts"],"names":[],"mappings":";;AACA,qDAAiD;AAOjD,yCAAgD,WAA0B,EAAE,OAAO,GAAG,CAAE,KAAK,EAAE,KAAK,CAAE;IAClG,OAAO,WAAW;SACb,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;QACrB,OAAO,OAAO,CAAC,MAAM,CAAC,8BAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,8BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7F,CAAC,EAAE,EAAmB,CAAC;SACtB,MAAM,CAAC,IAAI,CAAC,EAAE;QACX,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAElE,OAAO,OAAO,CAAC,OAAO,CAAC,8BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,YAAY,KAAK,OAAO,CAAC;IAC/F,CAAC,CAAC;SACD,GAAG,CAAC,IAAI,CAAC,EAAE;QACR,IAAI,MAAM,GAAa,GAAG,EAAE;YACxB,OAAO;QACX,CAAC,CAAC;QACF,MAAM,QAAQ,GAAG,8BAAa,CAAC,IAAI,CAAC,8BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAa,CAAC;QACjF,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC9B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBAChC,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE;oBACrC,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;iBAC1B;YACL,CAAC,CAAC,CAAC;SACN;QAED,OAAO;YACH,QAAQ,EAAE,IAAI;YACd,MAAM;SACT,CAAC;IACN,CAAC,CAAC,CAAC;AACX,CAAC;AA5BD,0EA4BC","file":"import-injections-from-directories.js","sourcesContent":["import { Injection } from \"../interfaces/injection.interface\";\nimport { PlatformTools } from \"./platform-tools\";\n\n/**\n * @param { Array<string> } directories\n * @param { Array<string> } formats\n * @returns { Array<Injection> }\n */\nexport function importInjectionsFromDirectories(directories: Array<string>, formats = [ \".js\", \".ts\" ]): Array<Injection> {\n    return directories\n        .reduce((allDirs, dir) => {\n            return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormalize(dir)));\n        }, [] as Array<string>)\n        .filter(file => {\n            const dtsExtension = file.substring(file.length - 5, file.length);\n\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\n        })\n        .map(file => {\n            let target: Function = () => {\n                return;\n            };\n            const imported = PlatformTools.load(PlatformTools.pathResolve(file)) as Function;\n            if (typeof imported === \"object\") {\n                Object.keys(imported).forEach(key => {\n                    if (typeof imported[key] === \"function\") {\n                        target = imported[key];\n                    }\n                });\n            }\n\n            return {\n                location: file,\n                target,\n            };\n        });\n}\n"]}