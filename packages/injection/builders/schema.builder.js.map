{"version":3,"sources":["builders/schema.builder.ts"],"names":[],"mappings":";;AAAA,qCAAkE;AAClE,4FAAyF;AAEzF,8FAA2F;AAC3F,iEAA4D;AAC5D,kEAA+D;AAC/D,iEAA4D;AAC5D,8EAA2E;AAE3E;IAAA;QACqB,oBAAe,GAA0B,EAAE,CAAC;IA+DjE,CAAC;IA1DG,IAAc,UAAU;QACpB,OAAO,uBAAa,EAAE,CAAC;IAC3B,CAAC;IAKM,cAAc,CAAC,KAAoB;QACtC,MAAM,yBAAyB,GAAG,IAAI,qDAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACjF,MAAM,uBAAuB,GAAG,IAAI,iDAAuB,EAAE,CAAC;QAC9D,MAAM,eAAe,GAAG,yBAAyB,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC9E,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;QACzC,uBAAuB,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACvF,CAAC;IAEM,KAAK,CAAC,IAAI;QACb,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAEtE,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,EAAE;YACpG,MAAM,SAAS,GAAkB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAE1G,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACpC,IAAI,QAAQ,CAAC,QAAQ,IAAI,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;oBAClE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;iBACrC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,sBAAY,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;SAChG;aAAM;YACH,MAAM,WAAW,CAAC,aAAa,EAAE,CAAC;SACrC;QACD,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,IAAI;QACb,IAAI,OAAO,CAAC;QACZ,QAAQ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE;YAC7C,KAAK,eAAe,CAAC;YACrB,KAAK,aAAa,CAAC;YACnB,KAAK,cAAc,CAAC;YACpB,KAAK,gBAAgB,CAAC;YACtB,KAAK,cAAc,CAAC;YACpB,KAAK,aAAa,CAAC;YACnB,KAAK,iBAAiB,CAAC;YACvB,KAAK,cAAc;gBACf,OAAO,GAAG,IAAI,yCAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAClD,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC3C,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;gBACtB,MAAM;YACV,KAAK,aAAa;gBACd,OAAO,GAAG,IAAI,yCAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAClD,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC3C,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;gBACtB,MAAM;YACV;gBACI,MAAM;SACb;IACL,CAAC;CACJ;AAhED,sCAgEC","file":"schema.builder.js","sourcesContent":["import { Connection, getConnection, PromiseUtils } from \"typeorm\";\nimport { ConnectionMetadataBuilder } from \"typeorm/connection/ConnectionMetadataBuilder\";\nimport { EntityMetadata } from \"typeorm/metadata/EntityMetadata\";\nimport { EntityMetadataValidator } from \"typeorm/metadata-builder/EntityMetadataValidator\";\nimport { MongoSchemaBuilder } from \"./mongo-schema.builder\";\nimport { MysqlDriver } from \"typeorm/driver/mysql/MysqlDriver\";\nimport { RdbmsSchemaBuilder } from \"./rdbms-schema.builder\";\nimport { SqlServerDriver } from \"typeorm/driver/sqlserver/SqlServerDriver\";\n\nexport class SchemaBuilder {\n    private readonly entityMetadatas: Array<EntityMetadata> = [];\n\n    /**\n     * @returns { Connection }\n     */\n    protected get connection(): Connection {\n        return getConnection();\n    }\n\n    /**\n     * @param { Array<string> } paths\n     */\n    public buildMetadatas(paths: Array<string>): void {\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this.connection);\n        const entityMetadataValidator = new EntityMetadataValidator();\n        const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(paths);\n        Object.assign(this, { entityMetadatas });\n        entityMetadataValidator.validateMany(this.entityMetadatas, this.connection.driver);\n    }\n\n    public async drop() {\n        const queryRunner = await this.connection.createQueryRunner(\"master\");\n\n        if (this.connection.driver instanceof SqlServerDriver || this.connection.driver instanceof MysqlDriver) {\n            const databases: Array<string> = this.connection.driver.database ? [this.connection.driver.database] : [];\n\n            this.entityMetadatas.forEach(metadata => {\n                if (metadata.database && databases.indexOf(metadata.database) === -1) {\n                    databases.push(metadata.database);\n                }\n            });\n\n            await PromiseUtils.runInSequence(databases, database => queryRunner.clearDatabase(database));\n        } else {\n            await queryRunner.clearDatabase();\n        }\n        await queryRunner.release();\n    }\n\n    public async sync() {\n        let builder;\n        switch (this.connection.driver.constructor.name) {\n            case \"CordovaDriver\":\n            case \"MysqlDriver\":\n            case \"OracleDriver\":\n            case \"PostgresDriver\":\n            case \"SqliteDriver\":\n            case \"SqljsDriver\":\n            case \"SqlServerDriver\":\n            case \"WebsqlDriver\":\n                builder = new RdbmsSchemaBuilder(this.connection);\n                builder.setMetadatas(this.entityMetadatas);\n                await builder.build();\n                break;\n            case \"MongoDriver\":\n                builder = new MongoSchemaBuilder(this.connection);\n                builder.setMetadatas(this.entityMetadatas);\n                await builder.build();\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]}