{"version":3,"sources":["decorators/module.decorator.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAC1B,oFAA2E;AAE3E,4CAA8C;AAG9C,gBAAuB,QAAwB;IAC3C,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;IAE/F,OAAO,CAAC,MAAW,EAAE,EAAE;QACnB,KAAK,MAAM,QAAQ,IAAI,QAAQ,EAAE;YAC7B,IAAI,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBACnC,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;aAChE;SACJ;QACD,OAAO,CAAC,cAAc,CAAC,0BAAc,EAAE,mCAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACzE,CAAC,CAAC;AACN,CAAC;AAXD,wBAWC","file":"module.decorator.js","sourcesContent":["import \"reflect-metadata\";\nimport { InjectionType } from \"@notadd/core/constants/injection.constants\";\n\nimport { INJECTION_TYPE } from \"../constants\";\nimport { ModuleMetadata } from \"../metadatas\";\n\nexport function Module(metadata: ModuleMetadata): ClassDecorator {\n    metadata.modules = metadata.imports && !metadata.modules ? metadata.imports : metadata.modules;\n\n    return (target: any) => {\n        for (const property in metadata) {\n            if (metadata.hasOwnProperty(property)) {\n                Reflect.defineMetadata(property, metadata[property], target);\n            }\n        }\n        Reflect.defineMetadata(INJECTION_TYPE, InjectionType.Module, target);\n    };\n}\n"]}