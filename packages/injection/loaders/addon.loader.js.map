{"version":3,"sources":["loaders/addon.loader.ts"],"names":[],"mappings":"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","file":"addon.loader.js","sourcesContent":["import { existsSync } from \"fs\";\nimport { InjectionLoader } from \"./injection.loader\";\nimport { InjectionType } from \"@notadd/core/constants\";\nimport { SettingService } from \"@notadd/setting/services\";\nimport { AddonCache, Addon as AddonInterface, Injection } from \"../interfaces\";\n\nexport class AddonLoader extends InjectionLoader {\n    protected cacheForAddons: Array<AddonInterface> = [];\n\n    protected filePathForCache = `${process.cwd()}/storages/caches/addon.json`;\n\n    public get addons(): Array<AddonInterface> {\n        if (!this.cacheForAddons.length) {\n            this.loadAddonsFromCache();\n        }\n\n        return this.cacheForAddons;\n    }\n\n    constructor() {\n        super();\n        this.loadAddonsFromCache();\n    }\n\n    public loadCachesFromJson(): AddonCache {\n        return this.loadCachesFromJsonFile<AddonCache>(this.filePathForCache);\n    }\n\n    public refresh() {\n        this.cacheForAddons.splice(0, this.cacheForAddons.length);\n\n        return this;\n    }\n\n    public async syncWithSetting(setting: SettingService) {\n        if (!this.cacheForAddons.length) {\n            this.loadAddonsFromCache();\n        }\n        for (let i = 0; i < this.cacheForAddons.length; i ++) {\n            const addon = this.cacheForAddons[i];\n            const identification = addon.identification;\n            addon.enabled = await setting.get(`addon.${identification}.enabled`, false);\n            addon.installed = await setting.get(`addon.${identification}.installed`, false);\n            this.cacheForAddons.splice(i, 1, addon);\n        }\n\n        this.syncCachesToFile();\n\n        return this;\n    }\n\n    protected loadAddonsFromCache() {\n        this.cacheForAddons.splice(0, this.cacheForAddons.length);\n        this.cacheForAddons = this\n            .injections\n            .filter((injection: Injection) => {\n                return InjectionType.Addon === Reflect.getMetadata(\"__injection_type__\", injection.target);\n            })\n            .map((injection: Injection) => {\n                return {\n                    authors: Reflect.getMetadata(\"authors\", injection.target),\n                    description: Reflect.getMetadata(\"description\", injection.target),\n                    enabled: false,\n                    identification: Reflect.getMetadata(\"identification\", injection.target),\n                    installed: false,\n                    location: injection.location,\n                    name: Reflect.getMetadata(\"name\", injection.target),\n                    target: injection.target,\n                    version: Reflect.getMetadata(\"version\", injection.target),\n                };\n            });\n    }\n\n    protected syncCachesToFile() {\n        let caches: AddonCache = {\n            enabled: [],\n        };\n        if (existsSync(this.filePathForCache)) {\n            caches = this.loadCachesFromJson();\n        }\n        const exists: Array<string> = caches.enabled ? caches.enabled : [];\n        const locations = this.addons.filter((addon: AddonInterface) => {\n            return addon.enabled === true;\n        }).map((addon: AddonInterface) => {\n            return addon.location;\n        });\n        if (this.hasDiffBetweenArrays(exists, locations)) {\n            caches.enabled = locations;\n            this.writeCachesToFile(this.filePathForCache, caches);\n        }\n    }\n}\n\nexport const Addon = new AddonLoader();\n"]}