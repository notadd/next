{"version":3,"sources":["loaders/injection.loader.ts"],"names":[],"mappings":";;AAAA,mDAAmD;AACnD,+BAA+B;AAC/B,2BAAgC;AAChC,4CAA+D;AAE/D,2CAAwC;AACxC,kDAA4C;AAE5C;IAoBI;QAnBU,uBAAkB,GAA8B,EAAE,CAAC;QAEnD,qBAAgB,GAAG,EAAE,CAAC;QAEtB,WAAM,GAAG,IAAI,eAAM,CAAC,WAAW,CAAC,CAAC;QAEjC,aAAQ,GAAG;YACjB,mBAAmB;YACnB,gBAAgB;SACnB,CAAC;QAWE,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACnC,CAAC;IAVD,IAAW,UAAU;QACjB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;YACjC,IAAI,CAAC,uBAAuB,EAAE,CAAC;SAClC;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACnC,CAAC;IAMM,iBAAiB;QACpB,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACtE,CAAC;IAES,oBAAoB,CAAC,GAAe,EAAE,GAAe;QAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACrB,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC/B,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAClB,CAAC;IAES,sBAAsB,CAAI,IAAY;QAC5C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,CAAC;QAElD,OAAO,cAAI,CAAC,IAAI,CAAI,IAAI,CAAC,CAAC;IAC9B,CAAC;IAES,uBAAuB;QAC7B,IAAI,CAAC,kBAAkB,GAAG,2CAA+B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7E,CAAC;IAES,iBAAiB,CAAC,IAAY,EAAE,IAAS;QAC/C,IAAI,eAAU,CAAC,cAAO,CAAC,IAAI,CAAC,CAAC,EAAE;YAC3B,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,wBAAwB,GAAG,IAAI,CAAC,CAAC;SACpD;aAAM;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,kBAAkB,CAAC,CAAC;SACvD;IACL,CAAC;CACJ;AAtDD,0CAsDC;AAEY,QAAA,SAAS,GAAG,IAAI,eAAe,EAAE,CAAC","file":"injection.loader.js","sourcesContent":["import * as writeJsonToFile from \"write-json-file\";\nimport { dirname } from \"path\";\nimport { existsSync } from \"fs\";\nimport { importInjectionsFromDirectories } from \"../utilities\";\nimport { Injection as InjectionInterface } from \"../interfaces\";\nimport { Logger } from \"@nestjs/common\";\nimport { Json } from \"@notadd/core/loaders\";\n\nexport class InjectionLoader {\n    protected cacheForInjections: Array<InjectionInterface> = [];\n\n    protected filePathForCache = \"\";\n\n    protected logger = new Logger(\"Injection\");\n\n    protected patterns = [\n        \"**/*.injection.js\",\n        \"**/*.module.js\",\n    ];\n\n    public get injections(): Array<InjectionInterface> {\n        if (!this.cacheForInjections.length) {\n            this.loadInjectionsFromCache();\n        }\n\n        return this.cacheForInjections;\n    }\n\n    constructor() {\n        this.loadInjectionsFromCache();\n    }\n\n    public refreshInjections() {\n        this.cacheForInjections.splice(0, this.cacheForInjections.length);\n    }\n\n    protected hasDiffBetweenArrays(one: Array<any>, two: Array<any>): boolean {\n        return one.filter(data => {\n            return two.indexOf(data) === -1;\n        }).length > 0 || two.filter(data => {\n            return one.indexOf(data) === -1;\n        }).length > 0;\n    }\n\n    protected loadCachesFromJsonFile<T>(path: string): T {\n        this.logger.log(\"Load caches from file: \" + path);\n\n        return Json.load<T>(path);\n    }\n\n    protected loadInjectionsFromCache() {\n        this.cacheForInjections = importInjectionsFromDirectories(this.patterns);\n    }\n\n    protected writeCachesToFile(path: string, data: any) {\n        if (existsSync(dirname(path))) {\n            writeJsonToFile.sync(path, data);\n            this.logger.log(\"Write caches to file: \" + path);\n        } else {\n            this.logger.warn(`Path: \\`${path}\\` do not exists`);\n        }\n    }\n}\n\nexport const injection = new InjectionLoader();\n"]}