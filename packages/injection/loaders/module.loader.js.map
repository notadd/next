{"version":3,"sources":["loaders/module.loader.ts"],"names":[],"mappings":"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","file":"module.loader.js","sourcesContent":["import { existsSync } from \"fs\";\nimport { InjectionType } from \"@notadd/core/constants\";\nimport { SettingService } from \"@notadd/setting/services\";\n\nimport { InjectionLoader } from \"./injection.loader\";\nimport { Injection, ModuleCache } from \"../interfaces\";\nimport { Module as ModuleInterface } from \"../interfaces/module.interface\";\n\nexport class ModuleLoader extends InjectionLoader {\n    protected cacheForModules: Array<ModuleInterface> = [];\n\n    protected filePathForCache = `${process.cwd()}/storages/caches/module.json`;\n\n    public get modules(): Array<ModuleInterface> {\n        if (!this.cacheForModules.length) {\n            this.loadModulesFromCaches();\n        }\n\n        return this.cacheForModules;\n    }\n\n    constructor() {\n        super();\n        this.loadModulesFromCaches();\n    }\n\n    public refresh() {\n        this.cacheForModules.splice(0, this.cacheForModules.length);\n\n        return this;\n    }\n\n    public async syncWithSetting(setting: SettingService) {\n        if (!this.cacheForModules.length) {\n            this.loadModulesFromCaches();\n        }\n        for (let i = 0; i < this.cacheForModules.length; i++) {\n            const module = this.cacheForModules[ i ];\n            const identification = module.identification;\n            module.enabled = await setting.get(`module.${identification}.enabled`, false);\n            module.installed = await setting.get(`module.${identification}.installed`, false);\n            this.cacheForModules.splice(i, 1, module);\n        }\n\n        this.syncCachesToFile();\n\n        return this;\n    }\n\n    public loadCachesFromJson(): ModuleCache {\n        return this.loadCachesFromJsonFile<ModuleCache>(this.filePathForCache);\n    }\n\n    protected loadModulesFromCaches() {\n        this.cacheForModules.splice(0, this.cacheForModules.length);\n        this.cacheForModules = this\n            .injections\n            .filter((injection: Injection) => {\n                return InjectionType.Module === Reflect.getMetadata(\"__injection_type__\", injection.target);\n            })\n            .map((injection: Injection) => {\n                const identification = Reflect.getMetadata(\"identification\", injection.target);\n\n                return {\n                    authors: Reflect.getMetadata(\"authors\", injection.target),\n                    description: Reflect.getMetadata(\"description\", injection.target),\n                    enabled: false,\n                    identification,\n                    installed: false,\n                    location: injection.location,\n                    name: Reflect.getMetadata(\"name\", injection.target),\n                    target: injection.target,\n                    version: Reflect.getMetadata(\"version\", injection.target),\n                };\n            });\n    }\n\n    protected syncCachesToFile() {\n        let caches: ModuleCache = {\n            enabled: [],\n        };\n        if (existsSync(this.filePathForCache)) {\n            caches = this.loadCachesFromJson();\n        }\n        const exists: Array<string> = caches.enabled ? caches.enabled : [];\n        const locations = this.modules.filter((module: ModuleInterface) => {\n            return module.enabled === true;\n        }).map((module: ModuleInterface) => {\n            return module.location;\n        });\n        if (this.hasDiffBetweenArrays(exists, locations)) {\n            caches.enabled = locations;\n\n            this.writeCachesToFile(this.filePathForCache, caches);\n        }\n    }\n}\n\nexport const module = new ModuleLoader();\n"]}