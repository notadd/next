{"version":3,"sources":["loaders/extension.loader.ts"],"names":[],"mappings":"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","file":"extension.loader.js","sourcesContent":["import { existsSync } from \"fs\";\nimport { InjectionLoader } from \"./injection.loader\";\nimport { InjectionType } from \"@notadd/core/constants\";\nimport { SettingService } from \"@notadd/setting/services\";\nimport { ExtensionCache } from \"../interfaces/extension-cache.interface\";\nimport { Injection } from \"../interfaces/injection.interface\";\nimport { Extension as ExtensionInterface } from \"../interfaces/extension.interfaces\";\n\nexport class ExtensionLoader extends InjectionLoader {\n    protected cacheForExtensions: Array<ExtensionInterface> = [];\n\n    protected filePathForCache = `${process.cwd()}/storages/caches/extension.json`;\n\n    public get extensions(): Array<ExtensionInterface> {\n        if (!this.cacheForExtensions.length) {\n            this.loadExtensionsFromCache();\n        }\n\n        return this.cacheForExtensions;\n    }\n\n    constructor() {\n        super();\n        this.loadExtensionsFromCache();\n    }\n\n    public loadCachesFromJson(): ExtensionCache {\n        return this.loadCachesFromJsonFile<ExtensionCache>(this.filePathForCache);\n    }\n\n    public refresh() {\n        this.cacheForExtensions.splice(0, this.cacheForExtensions.length);\n\n        return this;\n    }\n\n    public async syncWithSetting(setting: SettingService) {\n        if (!this.cacheForExtensions.length) {\n            this.loadExtensionsFromCache();\n        }\n        for (let i = 0; i < this.cacheForExtensions.length; i ++) {\n            const extension = this.cacheForExtensions[i];\n            const identification = extension.identification;\n            extension.enabled = await setting.get(`extension.${identification}.enabled`, false);\n            extension.installed = await setting.get(`extension.${identification}.installed`, false);\n            this.cacheForExtensions.splice(i, 1, extension);\n        }\n\n        this.syncCachesToFile();\n\n        return this;\n    }\n\n    protected loadExtensionsFromCache() {\n        this.cacheForExtensions.splice(0, this.cacheForExtensions.length);\n        this.cacheForExtensions = this\n            .injections\n            .filter((injection: Injection) => {\n                return InjectionType.Addon === Reflect.getMetadata(\"__injection_type__\", injection.target);\n            }).map((injection: Injection) => {\n                const identification = Reflect.getMetadata(\"identification\", injection.target);\n\n                return {\n                    authors: Reflect.getMetadata(\"authors\", injection.target),\n                    description: Reflect.getMetadata(\"description\", injection.target),\n                    enabled: false,\n                    identification,\n                    installed: false,\n                    location: injection.location,\n                    name: Reflect.getMetadata(\"name\", injection.target),\n                    shell: Reflect.getMetadata(\"shell\", injection.target),\n                    target: injection.target,\n                    version: Reflect.getMetadata(\"version\", injection.target),\n                };\n            });\n    }\n\n    protected syncCachesToFile() {\n        let caches: ExtensionCache = {\n            enabled: [],\n        };\n        if (existsSync(this.filePathForCache)) {\n            caches = this.loadCachesFromJson();\n        }\n        const exists: Array<string> = caches.enabled ? caches.enabled : [];\n        const locations = this.extensions.filter((extension: ExtensionInterface) => {\n            return extension.enabled === true;\n        }).map((extension: ExtensionInterface) => {\n            return extension.location;\n        });\n        if (this.hasDiffBetweenArrays(exists, locations)) {\n            caches.enabled = locations;\n            this.writeCachesToFile(this.filePathForCache, caches);\n        }\n    }\n}\n\nexport const Extension = new ExtensionLoader();\n"]}