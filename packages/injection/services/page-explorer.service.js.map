{"version":3,"sources":["services/page-explorer.service.ts"],"names":[],"mappings":"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","file":"page-explorer.service.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { flattenDeep } from \"lodash\";\nimport { ModulesContainer } from \"@nestjs/core/injector\";\nimport { MetadataScanner } from \"@nestjs/core/metadata-scanner\";\nimport { PAGE_DESCRIPTION, PAGE_FORM, PAGE_IDENTIFICATION, PAGE_NAME, PAGE_SCHEMA } from \"../constants\";\nimport { PageMetadata } from \"../metadatas\";\nimport { Injectable as InjectableInterface } from \"@nestjs/common/interfaces\";\nimport { DashboardMetadata } from \"../interfaces\";\n\n@Injectable()\nexport class PageExplorerService {\n    /**\n     * @param { ModulesContainer } modulesContainer\n     * @param { MetadataScanner } metadataScanner\n     */\n    constructor(\n        private readonly modulesContainer: ModulesContainer,\n        private readonly metadataScanner: MetadataScanner,\n    ) {\n    }\n\n    public explore(): Array<PageMetadata> {\n        const components = [\n            ...this.modulesContainer.values(),\n        ].map(module => module.components);\n\n        return flattenDeep<PageMetadata>(\n            components.map(component =>\n                [\n                    ...component.values(),\n                ]\n                    .map(({ instance, metatype }) => this.filterPages(instance, metatype)),\n            ),\n        );\n    }\n\n    /**\n     * @param instance\n     * @param prototype\n     * @param { string } methodName\n     * @returns { any }\n     */\n    protected extractMetadata(instance, prototype, methodName: string) {\n        const callback = prototype[ methodName ];\n\n        return {\n            form: {\n                callback: instance[ methodName ].bind(instance),\n                name: Reflect.getMetadata(PAGE_FORM, callback),\n            },\n            schema: {\n                callback: instance[ methodName ].bind(instance),\n                name: Reflect.getMetadata(PAGE_SCHEMA, callback),\n            },\n        };\n    }\n\n    /**\n     * @param { InjectableInterface } instance\n     * @param metatype\n     * @returns { Array<PageMetadata> }\n     */\n    protected filterPages(instance: InjectableInterface, metatype: any): Array<PageMetadata> {\n        const pageMetadata: PageMetadata = {\n            description: Reflect.getMetadata(PAGE_DESCRIPTION, metatype),\n            identification: Reflect.getMetadata(PAGE_IDENTIFICATION, metatype),\n            name: Reflect.getMetadata(PAGE_NAME, metatype),\n        };\n        if (pageMetadata.identification && pageMetadata.name) {\n            const prototype = Object.getPrototypeOf(instance);\n            const metadatas = this.metadataScanner.scanFromPrototype(\n                instance,\n                prototype,\n                name => this.extractMetadata(instance, prototype, name),\n            );\n            metadatas.filter(metadata => {\n                return metadata.form.name || metadata.schema.name;\n            }).map(instance => {\n                if (instance.form.name) {\n                    pageMetadata.form = instance.form;\n                }\n                if (instance.schema.name) {\n                    pageMetadata.schema = instance.schema;\n                }\n            });\n\n            return [\n                pageMetadata,\n            ];\n        } else {\n            return [];\n        }\n    }\n}\n"]}