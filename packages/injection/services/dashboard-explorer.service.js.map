{"version":3,"sources":["services/dashboard-explorer.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,4CAAuD;AAEvD,mCAAqC;AACrC,oDAAyD;AACzD,oEAAgE;AAChE,2CAA4C;AAI5C,IAAa,wBAAwB,GAArC;IAOI,YACqB,gBAAkC,EAClC,eAAgC;QADhC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,oBAAe,GAAf,eAAe,CAAiB;QAR7C,aAAQ,GAAG,mCAAuB,CAAC;IAU3C,CAAC;IAKM,OAAO;QACV,MAAM,UAAU,GAAG,CAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAE1F,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjF,CAAC;IAQS,eAAe,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAkB;QAC7D,MAAM,QAAQ,GAAG,SAAS,CAAE,UAAU,CAAE,CAAC;QAEzC,OAAO;YACH,IAAI,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC;YAClD,UAAU;SACb,CAAC;IACN,CAAC;IAMS,gBAAgB,CAAC,QAA6B;QACpD,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CACrD,QAAQ,EACR,SAAS,EACT,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC,CAC1D,CAAC;QAEF,OAAO,UAAU;aACZ,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,UAAU,CAAC;aAC3D,GAAG,CAAoB,SAAS,CAAC,EAAE;YAChC,MAAM,QAAQ,GAAG,QAAQ,CAAE,SAAS,CAAC,UAAU,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEjE,uBACI,QAAQ,IACL,SAAS,EACd;QACN,CAAC,CAAC,CAAC;IACX,CAAC;IAOS,OAAO,CACb,UAAgC,EAChC,QAAqD;QAErD,OAAO,oBAAW,CACd,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACvB,OAAO,CAAE,GAAG,SAAS,CAAC,MAAM,EAAE,CAAE,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CACL,CAAC;IACN,CAAC;CACJ,CAAA;AA5EY,wBAAwB;IADpC,mBAAU,EAAE;qCAS8B,2BAAgB;QACjB,kCAAe;GAT5C,wBAAwB,CA4EpC;AA5EY,4DAAwB","file":"dashboard-explorer.service.js","sourcesContent":["import { DASHBOARD_NAME_METADATA } from \"../constants\";\nimport { DashboardMetadata } from \"../interfaces\";\nimport { flattenDeep } from \"lodash\";\nimport { ModulesContainer } from \"@nestjs/core/injector\";\nimport { MetadataScanner } from \"@nestjs/core/metadata-scanner\";\nimport { Injectable } from \"@nestjs/common\";\nimport { Injectable as InjectableInterface } from \"@nestjs/common/interfaces\";\n\n@Injectable()\nexport class DashboardExplorerService {\n    private metadata = DASHBOARD_NAME_METADATA;\n\n    /**\n     * @param { ModulesContainer } modulesContainer\n     * @param { MetadataScanner } metadataScanner\n     */\n    constructor(\n        private readonly modulesContainer: ModulesContainer,\n        private readonly metadataScanner: MetadataScanner,\n    ) {\n    }\n\n    /**\n     * @returns { any }\n     */\n    public explore(): Array<DashboardMetadata> {\n        const components = [ ...this.modulesContainer.values() ].map(module => module.components);\n\n        return this.flatMap(components, instance => this.filterDashboards(instance));\n    }\n\n    /**\n     * @param instance\n     * @param prototype\n     * @param { string } methodName\n     * @returns { DashboardMetadata }\n     */\n    protected extractMetadata(instance, prototype, methodName: string): DashboardMetadata {\n        const callback = prototype[ methodName ];\n\n        return {\n            name: Reflect.getMetadata(this.metadata, callback),\n            methodName,\n        };\n    }\n\n    /**\n     * @param { Injectable } instance\n     * @returns { Array<DashboardMetadata> }\n     */\n    protected filterDashboards(instance: InjectableInterface): Array<DashboardMetadata> {\n        const prototype = Object.getPrototypeOf(instance);\n        const components = this.metadataScanner.scanFromPrototype(\n            instance,\n            prototype,\n            name => this.extractMetadata(instance, prototype, name),\n        );\n\n        return components\n            .filter(dashboard => dashboard.name && dashboard.methodName)\n            .map<DashboardMetadata>(dashboard => {\n                const callback = instance[ dashboard.methodName ].bind(instance);\n\n                return {\n                    callback,\n                    ...dashboard,\n                };\n            });\n    }\n\n    /**\n     * @param { Map<any, any>[] } components\n     * @param { (instance: any) => Array<DashboardMetadata> } callback\n     * @returns { Array<DashboardMetadata> }\n     */\n    protected flatMap(\n        components: Array<Map<any, any>>,\n        callback: (instance: any) => Array<DashboardMetadata>,\n    ): Array<DashboardMetadata> {\n        return flattenDeep<DashboardMetadata>(\n            components.map(component => {\n                return [ ...component.values() ].map(({ instance }) => callback(instance));\n            }),\n        );\n    }\n}\n"]}