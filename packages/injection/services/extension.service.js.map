{"version":3,"sources":["services/extension.service.ts"],"names":[],"mappings":"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","file":"extension.service.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { execFileSync } from \"child_process\";\nimport { Result } from \"@notadd/core/interfaces\";\nimport { SettingService } from \"@notadd/setting/services/setting.service\";\n\nimport { Extension } from \"../interfaces/extension.interfaces\";\nimport { ExtensionLoader } from \"../loaders/extension.loader\";\n\n@Injectable()\nexport class ExtensionService {\n    protected loader: ExtensionLoader = new ExtensionLoader();\n\n    /**\n     * @param { SettingService } settingService\n     */\n    constructor(\n        private readonly settingService: SettingService,\n    ) {\n        this.loader.syncWithSetting(this.settingService);\n    }\n\n    /**\n     * @param { string } identification\n     *\n     * @returns { Promise<Extension | undefined> }\n     */\n    public async getExtension(identification: string): Promise<Extension | undefined> {\n        return this.loader.extensions.find((extension: Extension) => {\n            return extension.identification === identification;\n        });\n    }\n\n    /**\n     * @param { Object } filter\n     *\n     * @returns { Promise<Array<Extension>> }\n     */\n    public async getExtensions(filter: { enabled?: boolean, installed?: boolean }): Promise<Array<Extension>> {\n        if (filter && typeof filter.enabled !== \"undefined\") {\n            if (filter.enabled) {\n                return this.loader.extensions.filter(extension => {\n                    return extension.enabled === true;\n                });\n            } else {\n                return this.loader.extensions.filter(extension => {\n                    return !extension.enabled;\n                });\n            }\n        } else if (filter && typeof filter.installed !== \"undefined\") {\n            if (filter.installed) {\n                return this.loader.extensions.filter(extension => {\n                    return extension.installed === true;\n                });\n            } else {\n                return this.loader.extensions.filter(extension => {\n                    return !extension.installed;\n                });\n            }\n        } else {\n            return this.loader.extensions;\n        }\n    }\n\n    /**\n     * @param { string } identification\n     *\n     * @returns { Promise<Extension | undefined> }\n     */\n    public async installExtension(identification: string): Promise<Result | undefined> {\n        const extension: Extension | undefined = await this.getExtension(identification);\n        if (!extension) {\n            throw new Error(\"Extension do not exists!\");\n        }\n        if (await this.settingService.get<boolean>(`extension.${extension.identification}.installed`, false)) {\n            throw new Error(`Extension [${extension.identification}] has been installed!`);\n        }\n        let shell = \"\";\n        if (extension.shell && extension.shell.install) {\n            shell = extension.shell.install;\n        }\n        let result = \"\";\n        if (shell.length > 0) {\n            // TODO: Add system information as options.\n            result = execFileSync(shell, []).toString();\n        }\n\n        await this.settingService.setSetting(`extension.${extension.identification}.installed`, \"1\");\n        await this.loader.refresh().syncWithSetting(this.settingService);\n\n        return {\n            message: `Install extension [${extension.identification}] successfully!\\n${result}`,\n        };\n    }\n\n    /**\n     * @param { string } identification\n     *\n     * @returns { Promise<Extension | undefined> }\n     */\n    public async uninstallExtension(identification: string): Promise<Result | undefined> {\n        const extension: Extension | undefined = await this.getExtension(identification);\n        if (!extension) {\n            throw new Error(\"Extension do not exists!\");\n        }\n        if (!await this.settingService.get<boolean>(`extension.${extension.identification}.installed`, false)) {\n            throw new Error(`Extension [${extension.identification}] is not installed!`);\n        }\n        let shell = \"\";\n        if (extension.shell && extension.shell.uninstall) {\n            shell = extension.shell.uninstall;\n        }\n        let result = \"\";\n        if (shell.length > 0) {\n            // TODO: Add system information as options.\n            result = execFileSync(shell, []).toString();\n        }\n\n        await this.settingService.setSetting(`extension.${extension.identification}.installed`, \"0\");\n        await this.loader.refresh().syncWithSetting(this.settingService);\n\n        return {\n            message: `Uninstall extension [${extension.identification}] successfully!\\n${result}`,\n        };\n    }\n}\n"]}