{"version":3,"sources":["services/workflow.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6CAA+D;AAC/D,2CAA4C;AAI5C,IAAa,eAAe,GAA5B;IAKI;QAFQ,cAAS,GAA4B,EAAE,CAAC;QAG5C,IAAI,CAAC,IAAI,GAAG,+BAAiB,EAAE,CAAC,OAAO,EAAE,CAAC;IAC9C,CAAC;IAKM,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAEM,UAAU,CAAC,SAAkC;QAChD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,KAAK;QACd,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAElC,CAAC,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;CACJ,CAAA;AA1BY,eAAe;IAD3B,mBAAU,EAAE;;GACA,eAAe,CA0B3B;AA1BY,0CAAe","file":"workflow.service.js","sourcesContent":["import { configureWorkflow, IWorkflowHost } from \"workflow-es\";\nimport { Injectable } from \"@nestjs/common\";\nimport { WorkflowMetadata } from \"../metadatas\";\n\n@Injectable()\nexport class WorkflowService {\n    private readonly host: IWorkflowHost;\n\n    private workflows: Array<WorkflowMetadata> = [];\n\n    constructor() {\n        this.host = configureWorkflow().getHost();\n    }\n\n    /**\n     * @returns { IWorkflowHost }\n     */\n    public getHost(): IWorkflowHost {\n        return this.host;\n    }\n\n    public initialize(metadatas: Array<WorkflowMetadata>) {\n        this.workflows = metadatas;\n    }\n\n    public async start() {\n        this.workflows.forEach(workflow => {\n            // this.host.registerWorkflow(workflow);\n        });\n        await this.host.start();\n    }\n}\n"]}