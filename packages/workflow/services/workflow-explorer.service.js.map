{"version":3,"sources":["services/workflow-explorer.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2CAA4C;AAE5C,mCAAqC;AACrC,4CAA2C;AAC3C,oEAAgE;AAChE,oDAAyD;AACzD,8EAA0E;AAI1E,IAAa,uBAAuB,GAApC;IAUI,YACqB,gBAAkC,EAClC,eAAgC,EAChC,cAA8B;QAF9B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,oBAAe,GAAf,eAAe,CAAiB;QAChC,mBAAc,GAAd,cAAc,CAAgB;QAZ3C,aAAQ,GAAG,UAAU,CAAC;QAEtB,mBAAc,GAAG,gBAAgB,CAAC;IAY1C,CAAC;IAKM,OAAO;QACV,MAAM,UAAU,GAAG;YACf,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;SACpC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAEnC,OAAO,oBAAW,CACd,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CACvB;YACI,GAAG,SAAS,CAAC,MAAM,EAAE;SACxB;aACI,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CACjF,CACJ,CAAC;IACN,CAAC;IAQS,eAAe,CAAC,QAA6B,EAAE,QAAa;QAClE,MAAM,UAAU,GAAY,OAAO,CAAC,WAAW,CAAC,uBAAW,EAAE,QAAQ,CAAC,CAAC;QACvE,MAAM,YAAY,GAAqB;YACnC,QAAQ,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC;YACtD,cAAc,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC;SACrE,CAAC;QAEF,IAAI,UAAU,IAAI,YAAY,CAAC,cAAc,EAAE;YAC3C,YAAY,CAAC,MAAM,GAAG,QAAQ,CAAC;YAE/B,OAAO;gBACH,YAAY;aACf,CAAC;SACL;aAAM;YACH,OAAO,EAAE,CAAC;SACb;IACL,CAAC;CACJ,CAAA;AA1DY,uBAAuB;IADnC,mBAAU,EAAE;qCAY8B,2BAAgB;QACjB,kCAAe;QAChB,gCAAc;GAb1C,uBAAuB,CA0DnC;AA1DY,0DAAuB","file":"workflow-explorer.service.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { Injectable as InjectableInterface } from \"@nestjs/common/interfaces\";\nimport { flattenDeep } from \"lodash\";\nimport { IS_WORKFLOW } from \"../constants\";\nimport { MetadataScanner } from \"@nestjs/core/metadata-scanner\";\nimport { ModulesContainer } from \"@nestjs/core/injector\";\nimport { SettingService } from \"@notadd/setting/services/setting.service\";\nimport { WorkflowMetadata } from \"../metadatas\";\n\n@Injectable()\nexport class WorkflowExplorerService {\n    private category = \"category\";\n\n    private identification = \"identification\";\n\n    /**\n     * @param { ModulesContainer } modulesContainer\n     * @param { MetadataScanner } metadataScanner\n     * @param { SettingService } settingService\n     */\n    constructor(\n        private readonly modulesContainer: ModulesContainer,\n        private readonly metadataScanner: MetadataScanner,\n        private readonly settingService: SettingService,\n    ) {\n    }\n\n    /**\n     * @returns { Array<WorkflowMetadata> }\n     */\n    public explore(): Array<WorkflowMetadata> {\n        const components = [\n            ...this.modulesContainer.values(),\n        ].map(module => module.components);\n\n        return flattenDeep(\n            components.map(component =>\n                [\n                    ...component.values(),\n                ]\n                    .map(({ instance, metatype }) => this.filterWorkflows(instance, metatype)),\n            ),\n        );\n    }\n\n    /**\n     * @param { Injectable } instance\n     * @param metatype\n     *\n     * @returns { Array<WorkflowMetadata> }\n     */\n    protected filterWorkflows(instance: InjectableInterface, metatype: any): Array<WorkflowMetadata> {\n        const isWorkflow: boolean = Reflect.getMetadata(IS_WORKFLOW, metatype);\n        const workflowMeta: WorkflowMetadata = {\n            category: Reflect.getMetadata(this.category, metatype),\n            identification: Reflect.getMetadata(this.identification, metatype),\n        };\n\n        if (isWorkflow && workflowMeta.identification) {\n            workflowMeta.target = instance;\n\n            return [\n                workflowMeta,\n            ];\n        } else {\n            return [];\n        }\n    }\n}\n"]}