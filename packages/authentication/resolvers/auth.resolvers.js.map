{"version":3,"sources":["resolvers/auth.resolvers.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6CAAkD;AAClD,2CAA2C;AAG3C,sCAAsC;AACtC,0CAA0C;AAG1C,IAAa,aAAa,GAA1B;IACI,YAA6B,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IACjD,CAAC;IAID,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,IAAuB;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5E,CAAC;CACJ,CAAA;AAHG;IAFC,eAAK,EAAE;IACP,kBAAS,CAAC,kBAAS,CAAC;;;;iDAGpB;AARQ,aAAa;IADzB,kBAAQ,CAAC,MAAM,CAAC;qCAEyB,sBAAW;GADxC,aAAa,CASzB;AATY,sCAAa","file":"auth.resolvers.js","sourcesContent":["import { Query, Resolver } from \"@nestjs/graphql\";\nimport { UseGuards } from \"@nestjs/common\";\n\nimport { AuthDto } from \"../dtos\";\nimport { UserGuard } from \"../guards\";\nimport { AuthService } from \"../services\";\n\n@Resolver(\"Auth\")\nexport class AuthResolvers {\n    constructor(private readonly service: AuthService) {\n    }\n\n    @Query()\n    @UseGuards(UserGuard)\n    async getAuthToken(obj, args: { auth: AuthDto }): Promise<any> {\n        return this.service.createToken(args.auth.username, args.auth.password);\n    }\n}\n"]}